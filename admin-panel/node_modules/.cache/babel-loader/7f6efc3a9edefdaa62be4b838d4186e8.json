{"ast":null,"code":"import { publicRequest, userRequest } from \"../requestMethods\";\nimport { deleteProductFailure, deleteProductStart, deleteProductSuccess, getProductFailure, getProductStart, getProductSuccess, addProductStart, addProductSuccess, addProductFailure, updateProductStart, updateProductSuccess, updateProductFailure } from \"./productRedux\";\nimport { loginFailure, loginStart, loginSuccess } from \"./userRedux\";\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n\n  try {\n    const res = await publicRequest.post(\"/auth/login\", user);\n    dispatch(loginSuccess(res.data));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\nexport const getProducts = async (dispatch, user) => {\n  dispatch(getProductStart());\n\n  try {\n    const res = await publicRequest.get(\"/products\");\n    dispatch(getProductSuccess(res.data));\n  } catch (err) {\n    dispatch(getProductFailure());\n  }\n};\nexport const deleteProduct = async (id, dispatch) => {\n  dispatch(deleteProductStart());\n\n  try {\n    //const res = await userRequest.delete(`/products/${id}`)\n    dispatch(deleteProductSuccess(id));\n  } catch (err) {\n    dispatch(deleteProductFailure());\n  }\n};\nexport const addProduct = async (product, dispatch) => {\n  dispatch(addProductStart());\n\n  try {\n    const res = await userRequest.post(`/products`, product);\n    dispatch(addProductSuccess(res.data));\n  } catch (err) {\n    dispatch(addProductFailure());\n  }\n};\nexport const updateProduct = async (id, product, dispatch) => {\n  dispatch(updateProductStart());\n\n  try {\n    const res = await userRequest.put(`/products/${id}`, product);\n    console.log(res.data);\n    dispatch(updateProductSuccess(res.data));\n  } catch (err) {\n    dispatch(updateProductFailure());\n  }\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/Codes/Learning/lama-dev/ecommerce-react-full/admin-panel/src/redux/apiCalls.js"],"names":["publicRequest","userRequest","deleteProductFailure","deleteProductStart","deleteProductSuccess","getProductFailure","getProductStart","getProductSuccess","addProductStart","addProductSuccess","addProductFailure","updateProductStart","updateProductSuccess","updateProductFailure","loginFailure","loginStart","loginSuccess","login","dispatch","user","res","post","data","err","getProducts","get","deleteProduct","id","addProduct","product","updateProduct","put","console","log"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,EAAmDC,oBAAnD,EAAyEC,iBAAzE,EAA4FC,eAA5F,EAA6GC,iBAA7G,EAAgIC,eAAhI,EAAiJC,iBAAjJ,EAAoKC,iBAApK,EAAuLC,kBAAvL,EAA2MC,oBAA3M,EAAiOC,oBAAjO,QAA6P,gBAA7P;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,YAAnC,QAAuD,aAAvD;AAEA,OAAO,MAAMC,KAAK,GAAG,OAAOC,QAAP,EAAiBC,IAAjB,KAA0B;AAC3CD,EAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;;AACA,MAAI;AACA,UAAMK,GAAG,GAAG,MAAMpB,aAAa,CAACqB,IAAd,CAAmB,aAAnB,EAAkCF,IAAlC,CAAlB;AACAD,IAAAA,QAAQ,CAACF,YAAY,CAACI,GAAG,CAACE,IAAL,CAAb,CAAR;AACH,GAHD,CAGE,OAAMC,GAAN,EAAW;AACTL,IAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMU,WAAW,GAAG,OAAON,QAAP,EAAiBC,IAAjB,KAA0B;AACjDD,EAAAA,QAAQ,CAACZ,eAAe,EAAhB,CAAR;;AACA,MAAI;AACA,UAAMc,GAAG,GAAG,MAAMpB,aAAa,CAACyB,GAAd,CAAkB,WAAlB,CAAlB;AACAP,IAAAA,QAAQ,CAACX,iBAAiB,CAACa,GAAG,CAACE,IAAL,CAAlB,CAAR;AACH,GAHD,CAGE,OAAMC,GAAN,EAAW;AACTL,IAAAA,QAAQ,CAACb,iBAAiB,EAAlB,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMqB,aAAa,GAAG,OAAOC,EAAP,EAAWT,QAAX,KAAwB;AACjDA,EAAAA,QAAQ,CAACf,kBAAkB,EAAnB,CAAR;;AACA,MAAI;AACA;AACAe,IAAAA,QAAQ,CAACd,oBAAoB,CAACuB,EAAD,CAArB,CAAR;AACH,GAHD,CAGE,OAAMJ,GAAN,EAAW;AACTL,IAAAA,QAAQ,CAAChB,oBAAoB,EAArB,CAAR;AACH;AACJ,CARM;AAWP,OAAO,MAAM0B,UAAU,GAAG,OAAOC,OAAP,EAAgBX,QAAhB,KAA6B;AACnDA,EAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR;;AACA,MAAI;AACA,UAAMY,GAAG,GAAG,MAAMnB,WAAW,CAACoB,IAAZ,CAAkB,WAAlB,EAA8BQ,OAA9B,CAAlB;AACAX,IAAAA,QAAQ,CAACT,iBAAiB,CAACW,GAAG,CAACE,IAAL,CAAlB,CAAR;AACH,GAHD,CAGE,OAAMC,GAAN,EAAW;AACTL,IAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMoB,aAAa,GAAG,OAAOH,EAAP,EAAWE,OAAX,EAAoBX,QAApB,KAAiC;AAC1DA,EAAAA,QAAQ,CAACP,kBAAkB,EAAnB,CAAR;;AACA,MAAI;AACA,UAAMS,GAAG,GAAG,MAAMnB,WAAW,CAAC8B,GAAZ,CAAiB,aAAYJ,EAAG,EAAhC,EAAmCE,OAAnC,CAAlB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYb,GAAG,CAACE,IAAhB;AACAJ,IAAAA,QAAQ,CAACN,oBAAoB,CAACQ,GAAG,CAACE,IAAL,CAArB,CAAR;AACH,GAJD,CAIE,OAAMC,GAAN,EAAW;AACTL,IAAAA,QAAQ,CAACL,oBAAoB,EAArB,CAAR;AACH;AACJ,CATM","sourcesContent":["import { publicRequest, userRequest } from \"../requestMethods\"\r\nimport { deleteProductFailure, deleteProductStart, deleteProductSuccess, getProductFailure, getProductStart, getProductSuccess, addProductStart, addProductSuccess, addProductFailure, updateProductStart, updateProductSuccess, updateProductFailure } from \"./productRedux\"\r\nimport { loginFailure, loginStart, loginSuccess } from \"./userRedux\"\r\n\r\nexport const login = async (dispatch, user) => {\r\n    dispatch(loginStart())\r\n    try {\r\n        const res = await publicRequest.post(\"/auth/login\", user)\r\n        dispatch(loginSuccess(res.data))\r\n    } catch(err) {\r\n        dispatch(loginFailure())\r\n    }\r\n}\r\n\r\nexport const getProducts = async (dispatch, user) => {\r\n    dispatch(getProductStart())\r\n    try {\r\n        const res = await publicRequest.get(\"/products\")\r\n        dispatch(getProductSuccess(res.data))\r\n    } catch(err) {\r\n        dispatch(getProductFailure())\r\n    }\r\n}\r\n\r\nexport const deleteProduct = async (id, dispatch) => {\r\n    dispatch(deleteProductStart())\r\n    try {\r\n        //const res = await userRequest.delete(`/products/${id}`)\r\n        dispatch(deleteProductSuccess(id))\r\n    } catch(err) {\r\n        dispatch(deleteProductFailure())\r\n    }\r\n}\r\n\r\n\r\nexport const addProduct = async (product, dispatch) => {\r\n    dispatch(addProductStart())\r\n    try {\r\n        const res = await userRequest.post(`/products`, product)\r\n        dispatch(addProductSuccess(res.data))\r\n    } catch(err) {\r\n        dispatch(addProductFailure())\r\n    }\r\n}\r\n\r\nexport const updateProduct = async (id, product, dispatch) => {\r\n    dispatch(updateProductStart())\r\n    try {\r\n        const res = await userRequest.put(`/products/${id}`, product)\r\n        console.log(res.data)\r\n        dispatch(updateProductSuccess(res.data))\r\n    } catch(err) {\r\n        dispatch(updateProductFailure())\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}